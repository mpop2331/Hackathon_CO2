const cds = require('../cds')

const NamespaceChecker = require('./linter/namespace_checker')
const AnnotationsChecker = require('./linter/annotations_checker')
const AllowlistChecker = require('./linter/allowlist_checker')

const LINTER_OPTIONS = ['element-prefix', 'extension-allowlist', 'namespace-blocklist']
const LEGACY_OPTIONS = ['entity-whitelist', 'service-whitelist', 'namespace-blacklist']

const linter = async (extCsn, fullCsn, extensionFilenames, req) => {
  const conf = cds.env.requires['cds.xt.ExtensibilityService'] || cds.env.mtx
  const compat = cds.env.mtx
  const linter_options = {}
  let x
  for (let p of LINTER_OPTIONS) if ((x = conf[p] || compat[p])) linter_options[p] = x // eslint-disable-line no-cond-assign
  for (let p of LEGACY_OPTIONS) if ((x = compat[p])) linter_options[p] = x // eslint-disable-line no-cond-assign
  if (!Object.keys(linter_options).length) return

  const reflectedCsn = cds.reflect(extCsn)
  const compileBaseDir = global.cds.root
  const warnings = await Promise.all([
    NamespaceChecker.check(reflectedCsn, fullCsn, compileBaseDir, linter_options),
    AnnotationsChecker.check(reflectedCsn, extensionFilenames, compileBaseDir, linter_options),
    AllowlistChecker.check(reflectedCsn, fullCsn, extensionFilenames, compileBaseDir, linter_options)
  ])
  const linterWarnings = [].concat.apply([], warnings) // REVISIT: What are we doing here?
  if (linterWarnings.length > 0) {
    req.reject(422, linterWarnings[0]) // REVISIT: Why are we returning the first warning only?
  }
}

module.exports = linter
