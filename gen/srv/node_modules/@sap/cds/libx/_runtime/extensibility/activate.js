const cds = require('../cds')

const handleDefaults = require('./defaults')
const Extensions = 'cds.xt.Extensions'

// REVISIT: Reuse ratio = 0
const _calculateExtensions = async function (ID, tag) {
  let active, inactive
  if (tag || ID) {
    const inactiveCqn = SELECT.from(Extensions).where({ activated: 'propertyBag' })
    if (ID) {
      inactiveCqn.where('ID !=', ID)
    } else {
      inactiveCqn.where('(tag !=', tag, 'or tag =', null, ')')
    }
    inactive = await cds.db.run(inactiveCqn)
    const activeCqn = SELECT.from(Extensions).where({ activated: 'database' })
    if (ID) {
      activeCqn.or({ ID })
    } else if (tag) {
      activeCqn.or({ tag })
    }
    active = await cds.db.run(activeCqn)
    if (inactive.length) {
      const deleteCqn = DELETE.from(Extensions).where(inactiveCqn.SELECT.where)
      await cds.db.run(deleteCqn)
    }
  } else {
    // activate all
    inactive = []
    active = await cds.db.run(SELECT.from(Extensions))
  }

  return { active, inactive }
}

// REVISIT: Reuse ratio = 0
const _restoreExtensions = async function (active, inactive, appCsn) {
  // delete all extensions
  await cds.db.run(DELETE.from(Extensions))
  // active
  active.forEach(row => {
    row.csn = row.csn.replace(/,"@cds.extension":true/g, '')
    row.activated = 'database'
    row.timestamp = '$now'
  })
  await cds.db.run(INSERT.into(Extensions).entries(active))
  // inactive
  if (inactive.length) {
    for (const na of inactive) {
      for (const extension of JSON.parse(na.csn).extensions) {
        await handleDefaults(extension, appCsn, cds.db)
      }
    }
    await cds.db.run(INSERT.into(Extensions).entries(inactive))
  }
}

// REVISIT: Review with Vitaly: (1) Delete Inactives > (2) DS.extend(t) > (3) Delete All > (4) Restore All ???
const activate = async function (ID, tag, tenant, appCsn) {
  const { active, inactive } = await _calculateExtensions(ID, tag)

  const { 'cds.xt.DeploymentService': ds } = cds.services
  await ds.extend(tenant)

  await _restoreExtensions(active, inactive, appCsn)
}

module.exports = activate
