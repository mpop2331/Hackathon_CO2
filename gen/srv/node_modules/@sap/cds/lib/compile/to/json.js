const cds = require ('../../index')
const path = require('path')

module.exports = (csn,o={}) => {
  const relative = filename => (o.src !== o.cwd) ? path.relative(o.src, path.join(o.cwd, filename)) : filename
  const relative_cds_home = RegExp ('^' + path.relative (o.src || o.cwd || cds.root, cds.home) + '/')
  const resolver = (_,v) => {

    if (!v) return v

    else if (v.grant && v.where) try {
      // Add a parsed _where clause for @restrict.{grant,where} annotations
      // Note: This has moved to cds.compile.for.java meanwhile, but is kept
      // here for compatibility, at least temporarily.
      return {...v, _where: JSON.stringify (cds.parse.xpr(v.where)) }
    } catch(e){/* ignored */}

    else if (v.kind === "service" && !v['@source'] && v.$location?.file) {
      // Preserve original sources for services so we can use them for finding
      // sibling implementation files when reloaded from csn.json.
      const file = relative(v.$location.file)
      .replace(relative_cds_home,'@sap/cds/')
      .replace('node_modules/','')
      .replace(/\\/g,'/')
      return { '@source': file, ...v }
    }

    return v

  }
  return JSON.stringify (csn, resolver, o && o.indents || 2)
}