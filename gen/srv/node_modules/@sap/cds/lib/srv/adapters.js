const lib = require('../../libx/_runtime')
const cds = require('../index')
const registry = {
  get rest() { return lib.to.rest },
  get odata() { return lib.to.odata_v4 },
  get odata_v2() { return lib.to.odata_v4 },
  get odata_v4() { return lib.to.odata_v4 },
  get fiori() { return lib.to.odata_v4 },
  none: ()=>{}
}


class ProtocolAdapter {

  static at (protocol) {
    const factory = registry[protocol]; if (factory) return factory
    else throw new Error (`Service protocol ${protocol} is not supported`)
  }

  /**
  * Constructs / returns a ProtocolAdapter for the given service and protocol.
  * The constructed adapters are cached per service, so subsequent calls
  * for same service and protocol returns the formerly constructed one.
  * @returns {ProtocolAdapter}
  */
  static serve (srv, protocol = _protocol4(srv)) {
    const cached = (srv._adapters || (srv._adapters={})) [protocol]; if (cached) return cached
    const adapter = Object.defineProperties (this.at (protocol) (srv), _prototype)
    return (adapter.service = srv)._adapters[protocol] = adapter
  }

  /**
  * Mounts the adapter to an express app.
  */
  in (app) {
    const srv = this.service
    app.use (srv.path+'/webapp/', (_,res)=> res.sendStatus(404))
    const cds_context_model = require('./srv-models')
    app.use (srv.path, logger, lib.perf, lib.auth(srv), cds_context_model.middleware4(srv), this)
    return srv
  }

  /**
  * Returns a proxy handler function with the specified service
  * as its prototype to allow usages like this:
  *
  *    const { CatalogService } = cds.serve(...)
  *    app.use ('/cats', CatalogService)
  */
  asRouter() {
    let router = this._router
    if (!router) {
      router = this._router = (...args) => this (...args)
      Object.defineProperty (router, 'name', {value: this.service.name})
      Object.setPrototypeOf (router, this.service)
    }
    return router
  }

}

const _protocol4 = (srv) => {
  const {to} = srv.options; if (to) return to
  return _protocol4Service(srv.definition)
}

const _protocol4Service = (service) => {
  return !service ? default_protocol : service['@protocol'] || service['@rest'] && 'rest' || service['@odata'] && 'odata_v4' || default_protocol
}


const LOG = cds.log(), DEBUG = cds.debug('server')
const logger = function cap_req_logger (req,_,next) {
  LOG && LOG (req.method, decodeURI(req.originalUrl), req.body||'')
  if (/\$batch/.test(req.url))  req.on ('dispatch', (req) => {
    LOG && LOG ('>', req.event, decodeURI(req._path), req._query||'')
    if (DEBUG && req.query) DEBUG (req.query)
  })
  next()
}


const default_protocol = 'odata_v4'
const _prototype = Object.getOwnPropertyDescriptors (ProtocolAdapter.prototype)
module.exports = { ProtocolAdapter, _protocol4Service }
