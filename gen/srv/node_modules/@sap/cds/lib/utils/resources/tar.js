const fs = require('fs')
const path = require('path')
const exec = require('child_process').exec
const cds = require('../../../libx/_runtime/cds')
const { exists } = require('./utils')

const TEMP_DIR = fs.realpathSync(require('os').tmpdir())

const _createArchiveCLI = (root, output) => {
  const cmd = 'tar -zcvf ' + output + ' -C ' + root + '  .'

  return new Promise((resolve, reject) => {
    exec(cmd, err => {
      if (err) reject(err)
      else resolve()
    })
  })
}

const packArchiveCLI = async (root) => {
  const temp = await fs.promises.mkdtemp(`${TEMP_DIR}${path.sep}tar-`)
  const output = path.join(temp, `${cds.utils.uuid()}.tgz`)
  try {
    await _createArchiveCLI(root, output)

    return fs.promises.readFile(output)
  }
  finally {
    if (await exists(temp)) {
      await fs.promises.rm(temp, { recursive: true, force: true })
    }
  }
}

const unpackArchiveCLI = async (tgz, folder) => {
  const cmd = 'tar -xzf ' + tgz + ' -C ' + folder

  return new Promise((resolve, reject) => {
    exec(cmd, err => {
      if (err) reject(err)
      else resolve()
    })
  })
}

module.exports = {
  packArchiveCLI,
  unpackArchiveCLI
}
