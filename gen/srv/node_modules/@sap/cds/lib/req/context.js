const cds = require ('../index'), { features } = cds.env, { uuid } = cds.utils
const async_events = { succeeded:1, failed:1, done:1, commit:1 }
const req_locale = require('./locale')
const { EventEmitter } = require('events')

/**
 * This is the base class for `cds.Events` and `cds.Requests`,
 * providing the transaction context nature to all instances.
 * Calling `srv.tx()` without args to start new transacions
 * creates direct instances of this base class.
 */
class EventContext {

  /** Creates a new instance that inherits from cds.context */
  static for (_,_as_root) {
    const ctx = new this (_)
    const base = cds.context
    if (base) {
      ctx._set('_propagated', base) // we inherit from former cds.currents
      if (!_as_root) {
        if (!ctx.context) ctx._set('context', base.context) // all transaction handling works with root contexts
        if (!ctx.tx && base.tx) ctx.tx = base.tx
      }
    }
    return ctx
  }

  constructor(_={}) {
    Object.defineProperty (this, '_', { value:_, writable:true })
    Object.assign (this, _)
  }

  _set (property, value) {
    Object.defineProperty (this, property, { value, writable:true })
    return value
  }



  //
  // Emitting and listening to succeeded / failed / done events
  //

  get emitter() {
    return this.context._emitter || this.context._set('_emitter', new EventEmitter)
  }

  async emit (event,...args) {
    const emitter = this.context._emitter; if (!emitter) return
    if (event in async_events)
      for (const each of emitter.listeners(event))
        await each.call (this, ...args)
    else return emitter.emit (event,...args)
  }

  on (event, listener) {
    return this.emitter.on (event, listener.bind(this))
  }

  once (event, listener) {
    return this.emitter.once (event, listener.bind(this))
  }

  before (event, listener) {
    return this.emitter.prependListener (event, listener.bind(this))
  }


  //
  // The following properties are inherited from root contexts, if exist...
  //

  set context(c) { if (c) this._set('context', this._set('_propagated', c)) }
  get context() { return this }

  set id(id) {
    if (id) super.id = id
  }
  get id() {
    return super.id = this._propagated.id || this.headers[ 'x-correlation-id' ] || uuid()
  }

  set tenant(t) {
    if (t) super.tenant = t
  }
  get tenant() {
    return super.tenant = this._propagated.tenant
  }

  set user(u) {
    const user = u instanceof cds.User ? u : new cds.User(u)
    if (u && typeof u === 'object') for (let p in _TENANT_LOCALE) if (p in u && u[p]) this[p] = u[p]
    super.user = new Proxy (user,{ get:(t,p) => p in _TENANT_LOCALE ? this[p] : t[p] })
  }
  get user() {
    this.user = this._propagated.user || _anonymous
    return this.user // IMPORTANT: first set this.user then return it separately to ensure we return the compat-wrapped objects
  }

  set locale(l) {
    if (l) super.locale = super._locale = l
  }
  get locale() {
    return super.locale = this._propagated.locale || req_locale(this._.req)
  }
  get _locale() {
    return super._locale = this._propagated._locale || req_locale.from_req(this._.req)
    || this.hasOwnProperty('locale') && this.locale // eslint-disable-line no-prototype-builtins
  }

  get _features() {
    return super._features = this._propagated._features || _features4 (this.http?.req?.features || this.user?.features || this.http?.req?.user?.features)
  }
  get features() {
    return super.features = this._features || noFeatures
  }
  set features(v) {
    super.features = _features4(v)
  }

  get model() {
    const m = this._propagated.model || this.http?.req.__model // IMPORTANT: Never use that anywhere else
    return this._set('model',m)
  }
  set model(m) {
    super.model = m
  }

  get timestamp() {
    return super.timestamp = this._propagated.timestamp || new Date
  }

  set headers(h) {
    if (h) super.headers = h
  }
  get headers() {
    let headers = this._.req?.headers
    if (!headers) { headers={}
      const outer = this._propagated.headers
      if (outer) for (let each of EventContext.propagateHeaders) {
        if (each in outer) headers[each] = outer[each]
      }
    }
    return super.headers = headers
  }

  set http(rr) {
    if (!this._.req) Object.assign(this._, rr)
    super.http = rr
  }
  get http() {
    return this._propagated.http || this._.req && this._.res && { req:this._.req, res:this._.res }
  }


  /**
   * This sets an EventContext's / Message's / Request's tx object, i.e.
   * the service which this request is passed on for execution.
   * In response to that, the instance will be wired up to and inherit
   * context properties from tx.context.
   */
  set tx (tx) {
    Object.defineProperty (this,'tx',{value:tx}) //> allowed only once!
    const root = tx.context?.context
    if (root && root !== this) {
      if (!this.hasOwnProperty('context')) this.context = root // eslint-disable-line no-prototype-builtins
      if (features.assert_integrity && features.assert_integrity_type == 'RT') {
        const reqs = root._children || root._set('_children', {})
        const all = reqs[tx.name] || (reqs[tx.name] = [])
        all.push(this)
      }
    }
  }
  get _tx() { return this.tx } // REVISIT: for compatibility to bade usages of req._tx
}

const _TENANT_LOCALE = { tenant:1, locale:2 }
const _anonymous = new cds.User.default

const _features4 = features => { // normalizes features to an object
  if (!features) return
  if (features === '*') return allFeatures
  const o = (
    Array.isArray(features) ? features.reduce((fts,f)=>{ fts[f] = true; return fts },{}) :
    typeof features === 'object' ? Object.fromEntries (Object.entries(features).filter(([,v])=>v)) :
    (''+features).split(',').reduce((fts,f)=>{ fts[f] = true; return fts },{})
  )
  return Object.defineProperty (o,'$hash',$hash)
}
const $hash = {
  get() { return this.$hash = Object.keys(this).join(',') },
  set(v){ Object.defineProperty(this,'$hash',{value:v}) },
  configurable:true
}
const allFeatures = new Proxy ({'*':true},{ has:() => true, get:(_,p) => p === '$hash' ? '*' : true })
const noFeatures = {__proto__:{ $hash:'' }}

EventContext.prototype._set('_propagated', Object.seal({}))
EventContext.propagateHeaders = [ 'x-correlation-id' ]
module.exports = EventContext
